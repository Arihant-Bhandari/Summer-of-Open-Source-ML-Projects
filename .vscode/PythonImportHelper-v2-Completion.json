[
    {
        "label": "gradio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gradio",
        "description": "gradio",
        "detail": "gradio",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "main",
        "description": "main",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "MBartForConditionalGeneration",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "MBart50TokenizerFast",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "sent_tokenize",
        "importPath": "nltk",
        "description": "nltk",
        "isExtraImport": true,
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk",
        "description": "nltk",
        "isExtraImport": true,
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "mediapipe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mediapipe",
        "description": "mediapipe",
        "detail": "mediapipe",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "CountVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "Advanced.Translator.AdityaPaul.app",
        "description": "Advanced.Translator.AdityaPaul.app",
        "peekOfCode": "def test(text, src, dest):\n  ans = main.main_translation(text,dest,src)\n  return ans['output']\ndemo = gr.Interface(\n    test,\n    [\"textbox\",\n     gr.Dropdown(\n            [(\"English\", \"en_XX\"), (\"Hindi\",\"hi_IN\"), (\"Bengali\",\"bn_IN\"), (\"Gujarati\",\"gu_IN\"), (\"Tamil\",\"ta_IN\"), (\"Telugu\",\"te_IN\"), (\"Marathi\",\"mr_IN\")], label=\"Source\", info=\"Select the Source Language!\"\n        ), \n     gr.Dropdown(",
        "detail": "Advanced.Translator.AdityaPaul.app",
        "documentation": {}
    },
    {
        "label": "demo",
        "kind": 5,
        "importPath": "Advanced.Translator.AdityaPaul.app",
        "description": "Advanced.Translator.AdityaPaul.app",
        "peekOfCode": "demo = gr.Interface(\n    test,\n    [\"textbox\",\n     gr.Dropdown(\n            [(\"English\", \"en_XX\"), (\"Hindi\",\"hi_IN\"), (\"Bengali\",\"bn_IN\"), (\"Gujarati\",\"gu_IN\"), (\"Tamil\",\"ta_IN\"), (\"Telugu\",\"te_IN\"), (\"Marathi\",\"mr_IN\")], label=\"Source\", info=\"Select the Source Language!\"\n        ), \n     gr.Dropdown(\n            [(\"English\", \"en_XX\"), (\"Hindi\",\"hi_IN\"), (\"Bengali\",\"bn_IN\"), (\"Gujarati\",\"gu_IN\"), (\"Tamil\",\"ta_IN\"), (\"Telugu\",\"te_IN\"), (\"Marathi\",\"mr_IN\")], label=\"Destination\", info=\"Select the Destination Language!\"\n        ), \n     ],",
        "detail": "Advanced.Translator.AdityaPaul.app",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "def load_model():\n    global model, model_loaded\n    model = MBartForConditionalGeneration.from_pretrained(\"SnypzZz/Llama2-13b-Language-translate\") \n    model_loaded =True\n    return model\ndef translation(text,dest_lang,dest_lang_code, src_lang_code):\n    if(dest_lang_code == src_lang_code):\n        return \"Please select different languages to translate between.\"\n    # headers = {\"Authorization\": f\"Bearer {secrets_sih.api_token_header}\"}\n    import secret",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "translation",
        "kind": 2,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "def translation(text,dest_lang,dest_lang_code, src_lang_code):\n    if(dest_lang_code == src_lang_code):\n        return \"Please select different languages to translate between.\"\n    # headers = {\"Authorization\": f\"Bearer {secrets_sih.api_token_header}\"}\n    import secret\n    # print(f'Bearer {secret.api_token_header}')\n    token = secret.api_token_header\n    # headers = {\"Authorization\": str(f'Bearer {secret.api_token_header}')}\n    headers = {\"Authorization\" : f'Bearer {token}'}\n    # Bengali Done",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "main_translation",
        "kind": 2,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "def main_translation(text,dest_lang_code,src_lang_code):\n    codes = {\"en_XX\":\"English\",\"bn_IN\":\"Bengali\", \"en_GB\":\"English\",\"gu_IN\":\"Gujarati\",\"hi_IN\":\"Hindi\",\"ta_IN\":\"Tamil\",\"te_IN\":\"Telugu\",\"mr_IN\":\"Marathi\"}\n    dest_lang = codes[dest_lang_code]\n    src_lang = codes[src_lang_code]\n    sentences = sent_tokenize(text)\n    output = \"\"\n    for line in sentences:\n        output += translation(line,dest_lang,dest_lang_code, src_lang_code)\n    return {\"output\":output}\nprint(main_translation(\"hello world\", \"hi_IN\", \"en_XX\"))",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "tokenizer = MBart50TokenizerFast.from_pretrained(\"SnypzZz/Llama2-13b-Language-translate\", src_lang=\"en_XX\")\n#pipe = pipeline(\"text2text-generation\", model=\"SnypzZz/Llama2-13b-Language-translate\", tokenizer=tokenizer)\nmodel = None\nmodel_loaded = False\ndef load_model():\n    global model, model_loaded\n    model = MBartForConditionalGeneration.from_pretrained(\"SnypzZz/Llama2-13b-Language-translate\") \n    model_loaded =True\n    return model\ndef translation(text,dest_lang,dest_lang_code, src_lang_code):",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "#pipe",
        "kind": 5,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "#pipe = pipeline(\"text2text-generation\", model=\"SnypzZz/Llama2-13b-Language-translate\", tokenizer=tokenizer)\nmodel = None\nmodel_loaded = False\ndef load_model():\n    global model, model_loaded\n    model = MBartForConditionalGeneration.from_pretrained(\"SnypzZz/Llama2-13b-Language-translate\") \n    model_loaded =True\n    return model\ndef translation(text,dest_lang,dest_lang_code, src_lang_code):\n    if(dest_lang_code == src_lang_code):",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "model = None\nmodel_loaded = False\ndef load_model():\n    global model, model_loaded\n    model = MBartForConditionalGeneration.from_pretrained(\"SnypzZz/Llama2-13b-Language-translate\") \n    model_loaded =True\n    return model\ndef translation(text,dest_lang,dest_lang_code, src_lang_code):\n    if(dest_lang_code == src_lang_code):\n        return \"Please select different languages to translate between.\"",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "model_loaded",
        "kind": 5,
        "importPath": "Advanced.Translator.AdityaPaul.main",
        "description": "Advanced.Translator.AdityaPaul.main",
        "peekOfCode": "model_loaded = False\ndef load_model():\n    global model, model_loaded\n    model = MBartForConditionalGeneration.from_pretrained(\"SnypzZz/Llama2-13b-Language-translate\") \n    model_loaded =True\n    return model\ndef translation(text,dest_lang,dest_lang_code, src_lang_code):\n    if(dest_lang_code == src_lang_code):\n        return \"Please select different languages to translate between.\"\n    # headers = {\"Authorization\": f\"Bearer {secrets_sih.api_token_header}\"}",
        "detail": "Advanced.Translator.AdityaPaul.main",
        "documentation": {}
    },
    {
        "label": "recommend",
        "kind": 2,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "def recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch\n    index = pt.index.get_loc(book_name)\n    similar_items = sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:5]\n    data = []\n    for i in similar_items:\n        item = []\n        temp_df = books[books['Book-Title'] == pt.index[i[0]]]\n        item.extend(list(temp_df.drop_duplicates('Book-Title')['Book-Title'].values))",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "avg_rating_df",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "avg_rating_df = ratings_with_name.groupby('Book-Title')['Book-Rating'].mean().reset_index()\navg_rating_df.rename(columns={'Book-Rating':'avg_ratings'}, inplace=True)\npopular_df= num_rating_df.merge(avg_rating_df, on='Book-Title')\npopular_df[popular_df['num_ratings']>=250].sort_values('avg_ratings',ascending=False).head(50)\npopular_df.merge(books,on='Book-Title').drop_duplicates('Book-Title')[['Book-Title','Book-Author','Image-URL-M','avg_ratings','num_ratings']]\n#Building the model\nx= ratings_with_name.groupby('User-ID').count()['Book-Rating']>200\npadhe_likhe_users= x[x].index\nfiltered_rating = ratings_with_name[ratings_with_name['User-ID'].isin(padhe_likhe_users)]\ny = filtered_rating.groupby('Book-Title').count()['Book-Rating']>=50",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "filtered_rating",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "filtered_rating = ratings_with_name[ratings_with_name['User-ID'].isin(padhe_likhe_users)]\ny = filtered_rating.groupby('Book-Title').count()['Book-Rating']>=50\nfamous_books = y[y].index\nfinal_ratings = filtered_rating[filtered_rating['Book-Title'].isin(famous_books)]\npt = final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')\npt.fillna(0,inplace=True)\nsimilarity_scores = cosine_similarity(pt)\ndef recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "y = filtered_rating.groupby('Book-Title').count()['Book-Rating']>=50\nfamous_books = y[y].index\nfinal_ratings = filtered_rating[filtered_rating['Book-Title'].isin(famous_books)]\npt = final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')\npt.fillna(0,inplace=True)\nsimilarity_scores = cosine_similarity(pt)\ndef recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch\n    index = pt.index.get_loc(book_name)",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "famous_books",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "famous_books = y[y].index\nfinal_ratings = filtered_rating[filtered_rating['Book-Title'].isin(famous_books)]\npt = final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')\npt.fillna(0,inplace=True)\nsimilarity_scores = cosine_similarity(pt)\ndef recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch\n    index = pt.index.get_loc(book_name)\n    similar_items = sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:5]",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "final_ratings",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "final_ratings = filtered_rating[filtered_rating['Book-Title'].isin(famous_books)]\npt = final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')\npt.fillna(0,inplace=True)\nsimilarity_scores = cosine_similarity(pt)\ndef recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch\n    index = pt.index.get_loc(book_name)\n    similar_items = sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:5]\n    data = []",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "pt",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "pt = final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')\npt.fillna(0,inplace=True)\nsimilarity_scores = cosine_similarity(pt)\ndef recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch\n    index = pt.index.get_loc(book_name)\n    similar_items = sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:5]\n    data = []\n    for i in similar_items:",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "similarity_scores",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "similarity_scores = cosine_similarity(pt)\ndef recommend(book_name):\n    print(\"Book name:\", book_name)\n    # index fetch\n    index = pt.index.get_loc(book_name)\n    similar_items = sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:5]\n    data = []\n    for i in similar_items:\n        item = []\n        temp_df = books[books['Book-Title'] == pt.index[i[0]]]",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "recommendations",
        "kind": 5,
        "importPath": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "description": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "peekOfCode": "recommendations = recommend('1984')\nprint(\"Recommendations:\", recommendations)\nbooks.drop_duplicates('Book-Title')",
        "detail": "Beginner.Book Recommender.SuhaniThakur.book_recom",
        "documentation": {}
    },
    {
        "label": "reordered",
        "kind": 2,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "def reordered(h):\n    h = h.reshape((4,2))\n    print(h)\n    hnew = np.zeros((4,2), dtype = np.float32)\n    add = h.sum(axis = 1)\n    hnew[3] = h[np.argmax(add)]\n    hnew[1] = h[np.argmax(add)]\n    diff = np.diff(h , axis = 1)\n    hnew[0] = h[np.argmax(diff)]\n    hnew[2] = h[np.argmax(diff)]",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "im_path",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "im_path = \"Beginner\\Document Scanner\\Bill.jpg\"\n# Read image from path\nimg = cv2.imread(im_path)\nprint(img.shape)\n# img resize\nimg = cv2.resize(img,(1500,800))\nprint(img.shape)\n# BGR format : BGR->RGB\nplt.imshow(img)\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "img = cv2.imread(im_path)\nprint(img.shape)\n# img resize\nimg = cv2.resize(img,(1500,800))\nprint(img.shape)\n# BGR format : BGR->RGB\nplt.imshow(img)\nplt.show()\n# Remove the Noise\n## Image Blurring",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "img = cv2.resize(img,(1500,800))\nprint(img.shape)\n# BGR format : BGR->RGB\nplt.imshow(img)\nplt.show()\n# Remove the Noise\n## Image Blurring\norig = img.copy()\ngray = cv2.cvtColor(orig,cv2.COLOR_BGR2GRAY)\nplt.imshow(gray, cmap = \"binary\")",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "orig",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "orig = img.copy()\ngray = cv2.cvtColor(orig,cv2.COLOR_BGR2GRAY)\nplt.imshow(gray, cmap = \"binary\")\nplt.show()\nblurred = cv2.GaussianBlur(gray, (5,5),0)\nplt.imshow(blurred, cmap = \"binary\")\nplt.show()\n# Regenerate the Image\nregen = cv2.cvtColor(blurred,cv2.COLOR_GRAY2BGR)\nplt.imshow(orig)",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "gray",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "gray = cv2.cvtColor(orig,cv2.COLOR_BGR2GRAY)\nplt.imshow(gray, cmap = \"binary\")\nplt.show()\nblurred = cv2.GaussianBlur(gray, (5,5),0)\nplt.imshow(blurred, cmap = \"binary\")\nplt.show()\n# Regenerate the Image\nregen = cv2.cvtColor(blurred,cv2.COLOR_GRAY2BGR)\nplt.imshow(orig)\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "blurred",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "blurred = cv2.GaussianBlur(gray, (5,5),0)\nplt.imshow(blurred, cmap = \"binary\")\nplt.show()\n# Regenerate the Image\nregen = cv2.cvtColor(blurred,cv2.COLOR_GRAY2BGR)\nplt.imshow(orig)\nplt.show()\nplt.imshow(regen)\nplt.show()\n## Edge Detection",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "regen",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "regen = cv2.cvtColor(blurred,cv2.COLOR_GRAY2BGR)\nplt.imshow(orig)\nplt.show()\nplt.imshow(regen)\nplt.show()\n## Edge Detection\nedge = cv2.Canny(blurred , 0 , 50)\norig_edge = edge.copy()\nplt.imshow(orig_edge)\nplt.title(\"Edge Detection\")",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "edge",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "edge = cv2.Canny(blurred , 0 , 50)\norig_edge = edge.copy()\nplt.imshow(orig_edge)\nplt.title(\"Edge Detection\")\nplt.show()\n## Contours Extraction\ncontours, _ = cv2.findContours(edge, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\nprint(len(contours))\ncontours = sorted(contours, reverse = True, key = cv2.contourArea)\n# Select the best Contours",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "orig_edge",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "orig_edge = edge.copy()\nplt.imshow(orig_edge)\nplt.title(\"Edge Detection\")\nplt.show()\n## Contours Extraction\ncontours, _ = cv2.findContours(edge, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\nprint(len(contours))\ncontours = sorted(contours, reverse = True, key = cv2.contourArea)\n# Select the best Contours\nfor c in contours:",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "contours",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "contours = sorted(contours, reverse = True, key = cv2.contourArea)\n# Select the best Contours\nfor c in contours:\n    p = cv2.arcLength(c, True)\n    approx = cv2.approxPolyDP(c, 0.0*p, True)\n    if len(approx) == 4:\n        target = approx\n        break\nprint(target.shape)\n# Reorder Target Contour",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "reorder",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "reorder = reordered(target)\nprint(\"  \")\nprint(reorder)\n# Project to a fixed screen\ninput_representation = reorder\noutput_map = np.float32([[0,0],[800,0],[800,800],[0,800]])\nM = cv2.getPerspectiveTransform(input_representation,output_map)\nans = cv2.warpPerspective(orig, M , (800,800))\nplt.imshow(ans)\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "input_representation",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "input_representation = reorder\noutput_map = np.float32([[0,0],[800,0],[800,800],[0,800]])\nM = cv2.getPerspectiveTransform(input_representation,output_map)\nans = cv2.warpPerspective(orig, M , (800,800))\nplt.imshow(ans)\nplt.show()\nres = cv2.cvtColor(ans,cv2.COLOR_BGR2GRAY)\nb_res = cv2.GaussianBlur(res, (3,3),0)\nplt.imshow(res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "output_map",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "output_map = np.float32([[0,0],[800,0],[800,800],[0,800]])\nM = cv2.getPerspectiveTransform(input_representation,output_map)\nans = cv2.warpPerspective(orig, M , (800,800))\nplt.imshow(ans)\nplt.show()\nres = cv2.cvtColor(ans,cv2.COLOR_BGR2GRAY)\nb_res = cv2.GaussianBlur(res, (3,3),0)\nplt.imshow(res,cmap = \"binary\")\nplt.show()\nplt.imshow(b_res,cmap = \"binary\")",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "M = cv2.getPerspectiveTransform(input_representation,output_map)\nans = cv2.warpPerspective(orig, M , (800,800))\nplt.imshow(ans)\nplt.show()\nres = cv2.cvtColor(ans,cv2.COLOR_BGR2GRAY)\nb_res = cv2.GaussianBlur(res, (3,3),0)\nplt.imshow(res,cmap = \"binary\")\nplt.show()\nplt.imshow(b_res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "ans",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "ans = cv2.warpPerspective(orig, M , (800,800))\nplt.imshow(ans)\nplt.show()\nres = cv2.cvtColor(ans,cv2.COLOR_BGR2GRAY)\nb_res = cv2.GaussianBlur(res, (3,3),0)\nplt.imshow(res,cmap = \"binary\")\nplt.show()\nplt.imshow(b_res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "res = cv2.cvtColor(ans,cv2.COLOR_BGR2GRAY)\nb_res = cv2.GaussianBlur(res, (3,3),0)\nplt.imshow(res,cmap = \"binary\")\nplt.show()\nplt.imshow(b_res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "b_res",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "b_res = cv2.GaussianBlur(res, (3,3),0)\nplt.imshow(res,cmap = \"binary\")\nplt.show()\nplt.imshow(b_res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "plt.imshow(res,cmap",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "plt.imshow(res,cmap = \"binary\")\nplt.show()\nplt.imshow(b_res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "plt.imshow(b_res,cmap",
        "kind": 5,
        "importPath": "Beginner.Document Scanner.Me_Scanner",
        "description": "Beginner.Document Scanner.Me_Scanner",
        "peekOfCode": "plt.imshow(b_res,cmap = \"binary\")\nplt.show()",
        "detail": "Beginner.Document Scanner.Me_Scanner",
        "documentation": {}
    },
    {
        "label": "alg",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "alg = \"./haarcascade_frontalface_default.xml\"\n# passing the algorithm to OpenCV\nhaar_cascade = cv2.CascadeClassifier(alg)\n# loading the image path into file_name variable - replace <INSERT YOUR IMAGE NAME HERE> with the path to your image\nfile_name = \"./office.png\"\n# reading the image\nimg = cv2.imread(file_name, 0)\n# creating a black and white version of the image\ngray_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n# detecting the faces",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "haar_cascade",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "haar_cascade = cv2.CascadeClassifier(alg)\n# loading the image path into file_name variable - replace <INSERT YOUR IMAGE NAME HERE> with the path to your image\nfile_name = \"./office.png\"\n# reading the image\nimg = cv2.imread(file_name, 0)\n# creating a black and white version of the image\ngray_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n# detecting the faces\nfaces = haar_cascade.detectMultiScale(\n    gray_img, scaleFactor=1.05, minNeighbors=2, minSize=(100, 100)",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "file_name",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "file_name = \"./office.png\"\n# reading the image\nimg = cv2.imread(file_name, 0)\n# creating a black and white version of the image\ngray_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n# detecting the faces\nfaces = haar_cascade.detectMultiScale(\n    gray_img, scaleFactor=1.05, minNeighbors=2, minSize=(100, 100)\n)\ni = 0",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "img = cv2.imread(file_name, 0)\n# creating a black and white version of the image\ngray_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n# detecting the faces\nfaces = haar_cascade.detectMultiScale(\n    gray_img, scaleFactor=1.05, minNeighbors=2, minSize=(100, 100)\n)\ni = 0\n# for each face detected\nfor x, y, w, h in faces:",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "gray_img",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n# detecting the faces\nfaces = haar_cascade.detectMultiScale(\n    gray_img, scaleFactor=1.05, minNeighbors=2, minSize=(100, 100)\n)\ni = 0\n# for each face detected\nfor x, y, w, h in faces:\n    # crop the image to select only the face\n    cropped_image = img[y : y + h, x : x + w]",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "faces",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "faces = haar_cascade.detectMultiScale(\n    gray_img, scaleFactor=1.05, minNeighbors=2, minSize=(100, 100)\n)\ni = 0\n# for each face detected\nfor x, y, w, h in faces:\n    # crop the image to select only the face\n    cropped_image = img[y : y + h, x : x + w]\n    # loading the target image path into target_file_name variable  - replace <INSERT YOUR TARGET IMAGE NAME HERE> with the path to your target image\n    target_file_name = 'stored-faces/' + str(i) + '.jpg'",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "description": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "peekOfCode": "i = 0\n# for each face detected\nfor x, y, w, h in faces:\n    # crop the image to select only the face\n    cropped_image = img[y : y + h, x : x + w]\n    # loading the target image path into target_file_name variable  - replace <INSERT YOUR TARGET IMAGE NAME HERE> with the path to your target image\n    target_file_name = 'stored-faces/' + str(i) + '.jpg'\n    cv2.imwrite(\n        target_file_name,\n        cropped_image,",
        "detail": "Beginner.Face-Detection-from-Image.AbuzarKhan.main",
        "documentation": {}
    },
    {
        "label": "bpoints",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "bpoints = [deque(maxlen=1024)]\ngpoints = [deque(maxlen=1024)]\nrpoints = [deque(maxlen=1024)]\nypoints = [deque(maxlen=1024)]\nblue_index = 0\ngreen_index = 0\nred_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "gpoints",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "gpoints = [deque(maxlen=1024)]\nrpoints = [deque(maxlen=1024)]\nypoints = [deque(maxlen=1024)]\nblue_index = 0\ngreen_index = 0\nred_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "rpoints",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "rpoints = [deque(maxlen=1024)]\nypoints = [deque(maxlen=1024)]\nblue_index = 0\ngreen_index = 0\nred_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "ypoints = [deque(maxlen=1024)]\nblue_index = 0\ngreen_index = 0\nred_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "blue_index",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "blue_index = 0\ngreen_index = 0\nred_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "green_index",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "green_index = 0\nred_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "red_index",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "red_index = 0\nyellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "yellow_index",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "yellow_index = 0\ncolors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]\ncolorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "colorIndex",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "colorIndex = 0\npaintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "paintWindow",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "paintWindow = np.zeros((471, 636, 3)) + 255\npaintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green\ncv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), -1)  # Red",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "paintWindow",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "paintWindow = cv2.rectangle(paintWindow, (40, 1), (140, 65), (0, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green\ncv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), -1)  # Red\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), -1)  # Yellow",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "paintWindow",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "paintWindow = cv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green\ncv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), -1)  # Red\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), -1)  # Yellow\ncv2.putText(paintWindow, \"CLEAR\", (49, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2, cv2.LINE_AA)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "paintWindow",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "paintWindow = cv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), 2)\npaintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green\ncv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), -1)  # Red\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), -1)  # Yellow\ncv2.putText(paintWindow, \"CLEAR\", (49, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2, cv2.LINE_AA)\ncv2.putText(paintWindow, \"BLUE\", (185, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "paintWindow",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "paintWindow = cv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), 2)\npaintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green\ncv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), -1)  # Red\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), -1)  # Yellow\ncv2.putText(paintWindow, \"CLEAR\", (49, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2, cv2.LINE_AA)\ncv2.putText(paintWindow, \"BLUE\", (185, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)\ncv2.putText(paintWindow, \"GREEN\", (298, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "paintWindow",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "paintWindow = cv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), 2)\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (255, 255, 0), -1)\ncv2.rectangle(paintWindow, (160, 1), (255, 65), (255, 0, 0), -1)  # Blue\ncv2.rectangle(paintWindow, (275, 1), (370, 65), (0, 255, 0), -1)  # Green\ncv2.rectangle(paintWindow, (390, 1), (485, 65), (0, 0, 255), -1)  # Red\ncv2.rectangle(paintWindow, (505, 1), (600, 65), (0, 255, 255), -1)  # Yellow\ncv2.putText(paintWindow, \"CLEAR\", (49, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2, cv2.LINE_AA)\ncv2.putText(paintWindow, \"BLUE\", (185, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)\ncv2.putText(paintWindow, \"GREEN\", (298, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)\ncv2.putText(paintWindow, \"RED\", (420, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "mpHands",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "mpHands = mp.solutions.hands\nhands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)\nmpDraw = mp.solutions.drawing_utils\ncap = cv2.VideoCapture(0)\nret = True\nwhile ret:\n    ret, frame = cap.read()\n    x, y, c = frame.shape\n    frame = cv2.flip(frame, 1)\n    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "hands",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)\nmpDraw = mp.solutions.drawing_utils\ncap = cv2.VideoCapture(0)\nret = True\nwhile ret:\n    ret, frame = cap.read()\n    x, y, c = frame.shape\n    frame = cv2.flip(frame, 1)\n    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    frame = cv2.rectangle(frame, (40, 1), (140, 65), (0, 0, 0), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "mpDraw",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "mpDraw = mp.solutions.drawing_utils\ncap = cv2.VideoCapture(0)\nret = True\nwhile ret:\n    ret, frame = cap.read()\n    x, y, c = frame.shape\n    frame = cv2.flip(frame, 1)\n    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    frame = cv2.rectangle(frame, (40, 1), (140, 65), (0, 0, 0), 2)\n    frame = cv2.rectangle(frame, (160, 1), (255, 65), (255, 0, 0), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nret = True\nwhile ret:\n    ret, frame = cap.read()\n    x, y, c = frame.shape\n    frame = cv2.flip(frame, 1)\n    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    frame = cv2.rectangle(frame, (40, 1), (140, 65), (0, 0, 0), 2)\n    frame = cv2.rectangle(frame, (160, 1), (255, 65), (255, 0, 0), 2)\n    frame = cv2.rectangle(frame, (275, 1), (370, 65), (0, 255, 0), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "ret",
        "kind": 5,
        "importPath": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "description": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "peekOfCode": "ret = True\nwhile ret:\n    ret, frame = cap.read()\n    x, y, c = frame.shape\n    frame = cv2.flip(frame, 1)\n    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    frame = cv2.rectangle(frame, (40, 1), (140, 65), (0, 0, 0), 2)\n    frame = cv2.rectangle(frame, (160, 1), (255, 65), (255, 0, 0), 2)\n    frame = cv2.rectangle(frame, (275, 1), (370, 65), (0, 255, 0), 2)\n    frame = cv2.rectangle(frame, (390, 1), (485, 65), (0, 0, 255), 2)",
        "detail": "Intermediate.Air-Canvas.AbuzarKhan.air_canvas",
        "documentation": {}
    },
    {
        "label": "tokens_text",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "tokens_text = [word_tokenize(str(word)) for word in train_data.lower]\n#Unique word counter\ntokens_counter = [item for sublist in tokens_text for item in sublist]\nstopwords_nltk = nltk.corpus.stopwords\nstop_words = stopwords_nltk.words('english')\nbow_counts = CountVectorizer(\n    tokenizer=word_tokenize,\n    stop_words=stop_words, #English Stopwords\n    ngram_range=(1, 1) #analysis of one word\n)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "tokens_counter",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "tokens_counter = [item for sublist in tokens_text for item in sublist]\nstopwords_nltk = nltk.corpus.stopwords\nstop_words = stopwords_nltk.words('english')\nbow_counts = CountVectorizer(\n    tokenizer=word_tokenize,\n    stop_words=stop_words, #English Stopwords\n    ngram_range=(1, 1) #analysis of one word\n)\n#Train - Test splitting\nreviews_train, reviews_test = train_test_split(train_data, test_size=0.2, random_state=0)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "stopwords_nltk",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "stopwords_nltk = nltk.corpus.stopwords\nstop_words = stopwords_nltk.words('english')\nbow_counts = CountVectorizer(\n    tokenizer=word_tokenize,\n    stop_words=stop_words, #English Stopwords\n    ngram_range=(1, 1) #analysis of one word\n)\n#Train - Test splitting\nreviews_train, reviews_test = train_test_split(train_data, test_size=0.2, random_state=0)\n#Creation of encoding related to train dataset",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "stop_words",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "stop_words = stopwords_nltk.words('english')\nbow_counts = CountVectorizer(\n    tokenizer=word_tokenize,\n    stop_words=stop_words, #English Stopwords\n    ngram_range=(1, 1) #analysis of one word\n)\n#Train - Test splitting\nreviews_train, reviews_test = train_test_split(train_data, test_size=0.2, random_state=0)\n#Creation of encoding related to train dataset\nX_train_bow = bow_counts.fit_transform(reviews_train.lower)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "bow_counts",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "bow_counts = CountVectorizer(\n    tokenizer=word_tokenize,\n    stop_words=stop_words, #English Stopwords\n    ngram_range=(1, 1) #analysis of one word\n)\n#Train - Test splitting\nreviews_train, reviews_test = train_test_split(train_data, test_size=0.2, random_state=0)\n#Creation of encoding related to train dataset\nX_train_bow = bow_counts.fit_transform(reviews_train.lower)\n#Transformation of test dataset with train encoding",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "X_train_bow",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "X_train_bow = bow_counts.fit_transform(reviews_train.lower)\n#Transformation of test dataset with train encoding\nX_test_bow = bow_counts.transform(reviews_test.lower)\n#Labels for train and test encoding\ny_train_bow = reviews_train['type']\ny_test_bow = reviews_test['type']\n# Logistic regression\nmodel1 = LogisticRegression(C=1, solver=\"liblinear\",max_iter=1000)\nmodel1.fit(X_train_bow, y_train_bow)\n# Prediction",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "X_test_bow",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "X_test_bow = bow_counts.transform(reviews_test.lower)\n#Labels for train and test encoding\ny_train_bow = reviews_train['type']\ny_test_bow = reviews_test['type']\n# Logistic regression\nmodel1 = LogisticRegression(C=1, solver=\"liblinear\",max_iter=1000)\nmodel1.fit(X_train_bow, y_train_bow)\n# Prediction\ntest_pred = model1.predict(X_test_bow)\nprint(\"Accuracy: \", accuracy_score(y_test_bow, test_pred) * 100)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "y_train_bow",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "y_train_bow = reviews_train['type']\ny_test_bow = reviews_test['type']\n# Logistic regression\nmodel1 = LogisticRegression(C=1, solver=\"liblinear\",max_iter=1000)\nmodel1.fit(X_train_bow, y_train_bow)\n# Prediction\ntest_pred = model1.predict(X_test_bow)\nprint(\"Accuracy: \", accuracy_score(y_test_bow, test_pred) * 100)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "y_test_bow",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "y_test_bow = reviews_test['type']\n# Logistic regression\nmodel1 = LogisticRegression(C=1, solver=\"liblinear\",max_iter=1000)\nmodel1.fit(X_train_bow, y_train_bow)\n# Prediction\ntest_pred = model1.predict(X_test_bow)\nprint(\"Accuracy: \", accuracy_score(y_test_bow, test_pred) * 100)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "model1",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "model1 = LogisticRegression(C=1, solver=\"liblinear\",max_iter=1000)\nmodel1.fit(X_train_bow, y_train_bow)\n# Prediction\ntest_pred = model1.predict(X_test_bow)\nprint(\"Accuracy: \", accuracy_score(y_test_bow, test_pred) * 100)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    },
    {
        "label": "test_pred",
        "kind": 5,
        "importPath": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "description": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "peekOfCode": "test_pred = model1.predict(X_test_bow)\nprint(\"Accuracy: \", accuracy_score(y_test_bow, test_pred) * 100)",
        "detail": "Intermediate.Twitter Sentiment Analysis.SuhaniThakur.Twitter_sent",
        "documentation": {}
    }
]